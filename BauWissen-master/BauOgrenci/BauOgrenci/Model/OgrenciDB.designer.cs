#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BauOgrenci.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Bau503Ogrenci")]
	public partial class OgrenciDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblDer(tblDer instance);
    partial void UpdatetblDer(tblDer instance);
    partial void DeletetblDer(tblDer instance);
    partial void InserttblEgitmen(tblEgitmen instance);
    partial void UpdatetblEgitmen(tblEgitmen instance);
    partial void DeletetblEgitmen(tblEgitmen instance);
    partial void InserttblOgrenci(tblOgrenci instance);
    partial void UpdatetblOgrenci(tblOgrenci instance);
    partial void DeletetblOgrenci(tblOgrenci instance);
    #endregion
		
		public OgrenciDBDataContext() : 
				base(global::BauOgrenci.Properties.Settings.Default.Bau503OgrenciConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public OgrenciDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OgrenciDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OgrenciDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OgrenciDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblDer> tblDers
		{
			get
			{
				return this.GetTable<tblDer>();
			}
		}
		
		public System.Data.Linq.Table<tblEgitmen> tblEgitmens
		{
			get
			{
				return this.GetTable<tblEgitmen>();
			}
		}
		
		public System.Data.Linq.Table<tblOgrenci> tblOgrencis
		{
			get
			{
				return this.GetTable<tblOgrenci>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblDers")]
	public partial class tblDer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _DersAdi;
		
		private EntitySet<tblOgrenci> _tblOgrencis;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDersAdiChanging(string value);
    partial void OnDersAdiChanged();
    #endregion
		
		public tblDer()
		{
			this._tblOgrencis = new EntitySet<tblOgrenci>(new Action<tblOgrenci>(this.attach_tblOgrencis), new Action<tblOgrenci>(this.detach_tblOgrencis));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DersAdi", DbType="NVarChar(50)")]
		public string DersAdi
		{
			get
			{
				return this._DersAdi;
			}
			set
			{
				if ((this._DersAdi != value))
				{
					this.OnDersAdiChanging(value);
					this.SendPropertyChanging();
					this._DersAdi = value;
					this.SendPropertyChanged("DersAdi");
					this.OnDersAdiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDer_tblOgrenci", Storage="_tblOgrencis", ThisKey="Id", OtherKey="DersId")]
		public EntitySet<tblOgrenci> tblOgrencis
		{
			get
			{
				return this._tblOgrencis;
			}
			set
			{
				this._tblOgrencis.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblOgrencis(tblOgrenci entity)
		{
			this.SendPropertyChanging();
			entity.tblDer = this;
		}
		
		private void detach_tblOgrencis(tblOgrenci entity)
		{
			this.SendPropertyChanging();
			entity.tblDer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblEgitmen")]
	public partial class tblEgitmen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _EgitmenAdi;
		
		private EntitySet<tblOgrenci> _tblOgrencis;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEgitmenAdiChanging(string value);
    partial void OnEgitmenAdiChanged();
    #endregion
		
		public tblEgitmen()
		{
			this._tblOgrencis = new EntitySet<tblOgrenci>(new Action<tblOgrenci>(this.attach_tblOgrencis), new Action<tblOgrenci>(this.detach_tblOgrencis));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EgitmenAdi", DbType="NVarChar(50)")]
		public string EgitmenAdi
		{
			get
			{
				return this._EgitmenAdi;
			}
			set
			{
				if ((this._EgitmenAdi != value))
				{
					this.OnEgitmenAdiChanging(value);
					this.SendPropertyChanging();
					this._EgitmenAdi = value;
					this.SendPropertyChanged("EgitmenAdi");
					this.OnEgitmenAdiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblEgitmen_tblOgrenci", Storage="_tblOgrencis", ThisKey="Id", OtherKey="EgitmenId")]
		public EntitySet<tblOgrenci> tblOgrencis
		{
			get
			{
				return this._tblOgrencis;
			}
			set
			{
				this._tblOgrencis.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblOgrencis(tblOgrenci entity)
		{
			this.SendPropertyChanging();
			entity.tblEgitmen = this;
		}
		
		private void detach_tblOgrencis(tblOgrenci entity)
		{
			this.SendPropertyChanging();
			entity.tblEgitmen = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblOgrenci")]
	public partial class tblOgrenci : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _OgrAdi;
		
		private string _OgrSoyadi;
		
		private string _OgrNo;
		
		private System.Nullable<int> _DersId;
		
		private System.Nullable<int> _EgitmenId;
		
		private EntityRef<tblDer> _tblDer;
		
		private EntityRef<tblEgitmen> _tblEgitmen;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOgrAdiChanging(string value);
    partial void OnOgrAdiChanged();
    partial void OnOgrSoyadiChanging(string value);
    partial void OnOgrSoyadiChanged();
    partial void OnOgrNoChanging(string value);
    partial void OnOgrNoChanged();
    partial void OnDersIdChanging(System.Nullable<int> value);
    partial void OnDersIdChanged();
    partial void OnEgitmenIdChanging(System.Nullable<int> value);
    partial void OnEgitmenIdChanged();
    #endregion
		
		public tblOgrenci()
		{
			this._tblDer = default(EntityRef<tblDer>);
			this._tblEgitmen = default(EntityRef<tblEgitmen>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OgrAdi", DbType="NVarChar(50)")]
		public string OgrAdi
		{
			get
			{
				return this._OgrAdi;
			}
			set
			{
				if ((this._OgrAdi != value))
				{
					this.OnOgrAdiChanging(value);
					this.SendPropertyChanging();
					this._OgrAdi = value;
					this.SendPropertyChanged("OgrAdi");
					this.OnOgrAdiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OgrSoyadi", DbType="NVarChar(50)")]
		public string OgrSoyadi
		{
			get
			{
				return this._OgrSoyadi;
			}
			set
			{
				if ((this._OgrSoyadi != value))
				{
					this.OnOgrSoyadiChanging(value);
					this.SendPropertyChanging();
					this._OgrSoyadi = value;
					this.SendPropertyChanged("OgrSoyadi");
					this.OnOgrSoyadiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OgrNo", DbType="NVarChar(50)")]
		public string OgrNo
		{
			get
			{
				return this._OgrNo;
			}
			set
			{
				if ((this._OgrNo != value))
				{
					this.OnOgrNoChanging(value);
					this.SendPropertyChanging();
					this._OgrNo = value;
					this.SendPropertyChanged("OgrNo");
					this.OnOgrNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DersId", DbType="Int")]
		public System.Nullable<int> DersId
		{
			get
			{
				return this._DersId;
			}
			set
			{
				if ((this._DersId != value))
				{
					if (this._tblDer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDersIdChanging(value);
					this.SendPropertyChanging();
					this._DersId = value;
					this.SendPropertyChanged("DersId");
					this.OnDersIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EgitmenId", DbType="Int")]
		public System.Nullable<int> EgitmenId
		{
			get
			{
				return this._EgitmenId;
			}
			set
			{
				if ((this._EgitmenId != value))
				{
					if (this._tblEgitmen.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEgitmenIdChanging(value);
					this.SendPropertyChanging();
					this._EgitmenId = value;
					this.SendPropertyChanged("EgitmenId");
					this.OnEgitmenIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDer_tblOgrenci", Storage="_tblDer", ThisKey="DersId", OtherKey="Id", IsForeignKey=true)]
		public tblDer tblDer
		{
			get
			{
				return this._tblDer.Entity;
			}
			set
			{
				tblDer previousValue = this._tblDer.Entity;
				if (((previousValue != value) 
							|| (this._tblDer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblDer.Entity = null;
						previousValue.tblOgrencis.Remove(this);
					}
					this._tblDer.Entity = value;
					if ((value != null))
					{
						value.tblOgrencis.Add(this);
						this._DersId = value.Id;
					}
					else
					{
						this._DersId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblDer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblEgitmen_tblOgrenci", Storage="_tblEgitmen", ThisKey="EgitmenId", OtherKey="Id", IsForeignKey=true)]
		public tblEgitmen tblEgitmen
		{
			get
			{
				return this._tblEgitmen.Entity;
			}
			set
			{
				tblEgitmen previousValue = this._tblEgitmen.Entity;
				if (((previousValue != value) 
							|| (this._tblEgitmen.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblEgitmen.Entity = null;
						previousValue.tblOgrencis.Remove(this);
					}
					this._tblEgitmen.Entity = value;
					if ((value != null))
					{
						value.tblOgrencis.Add(this);
						this._EgitmenId = value.Id;
					}
					else
					{
						this._EgitmenId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblEgitmen");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
